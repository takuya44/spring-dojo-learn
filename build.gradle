buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.flywaydb:flyway-mysql:10.9.1"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id "org.flywaydb.flyway" version "10.9.1"
    id "org.openapi.generator" version "7.6.0"
    // Spotlessプラグインを適用し、コードのフォーマットを自動的に行うための設定
    id 'com.diffplug.spotless' version '6.13.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.1'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation 'org.springframework.session:spring-session-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    runtimeOnly 'com.mysql:mysql-connector-j'
    testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.3'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework:spring-webflux'
}

tasks.named('test') {
    useJUnitPlatform()
}

flyway {
    url = 'jdbc:mysql://localhost:3307/apidb'
    user = 'apiuser'
    password = 'apipass'
    locations = [
            'filesystem:src/main/resources/db/migration',
            'filesystem:src/main/resources/db/migration_dev' // 開発用サンプルデータ
    ]
}

// OpenAPI の仕様ファイルのパスを定義 (openapi.yaml ファイルの場所)
def openApiSpecPath = "$projectDir/src/main/resources/openapi.yaml"

// OpenAPI Generator が生成したソースコードの出力先ディレクトリを定義
def openApiSourceCodePath = layout.buildDirectory.dir("spring").get().toString()

// OpenAPI の仕様ファイルが有効であることを検証するタスクの設定
openApiValidate {
    inputSpec.set(openApiSpecPath)  // 仕様ファイルのパスを指定
}

// OpenAPI Generator を使ってソースコードを生成するタスクの設定
openApiGenerate {
    generatorName.set("spring")  // 生成するコードの種類 (ここでは Spring 用のコードを生成)
    inputSpec.set(openApiSpecPath)  // 生成元となる OpenAPI 仕様ファイルのパスを指定
    outputDir.set(openApiSourceCodePath)  // 生成されたソースコードの出力先ディレクトリを指定
    apiPackage.set("com.example.blog.api")  // 生成される API クラスのパッケージ名
    modelPackage.set("com.example.blog.model")  // 生成されるモデルクラスのパッケージ名
    configOptions.put("interfaceOnly", "true")  // API インターフェースのみを生成 (実装は生成しない)
    configOptions.put("useSpringBoot3", "true")  // Spring Boot 3 の機能を利用
    configOptions.put("documentationProvider", "none")  // ドキュメント生成を無効化
}

// メインの Java ソースコードのディレクトリに、OpenAPI Generator で生成されたコードのディレクトリを追加
sourceSets.main.java.srcDir "${openApiSourceCodePath}/src/main/java"

// OpenAPIで生成されたコードのパスを相対パスで指定：絶対パスだとエラー発生
def openApiGeneratedCodeRelativePath = project.relativePath(openApiSourceCodePath)

spotless {
    java {
        // Spotlessが対象とするファイルを指定。OpenAPIによって生成されたJavaファイルが対象
        // ${openApiGeneratedCodeRelativePath}/src/main/java/以下のすべてのJavaファイルを対象とする
        target "${openApiGeneratedCodeRelativePath}/src/main/java/**/*.java".toString()

        // 不要なインポートを自動的に削除する設定
        removeUnusedImports()
    }
}